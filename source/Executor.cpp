/*/////////////////////////////////////// !! ////////////////////////////////////////////
 *
 * FILE:
 *     Executor.cpp
 *
 * DESCRIPTION:
 *
 *     This file contains all of the methods needed to execute the binary expression
 *     tress created by the Parser and BinaryExpressionTreeBuilder classes.
 *
 *     This file starts execution (after being constructed) with the Executor::run
 *     method.
 *
 * AUTHOR:
 *     Jason Mace
 *
 *
 * Copyright 2015 by Jason Mace
 *
 */////////////////////////////////////// !! ////////////////////////////////////////////

#include "Executor.h"
#include <iostream>


using namespace std;


/****************************************************************************************
 * Executor::Executor()
 *
 * Description:
 *     Executor Constructor
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
Executor::Executor() {
    this->ExceptionState = NULL;
    this->currentInstruction = 0;
    this->currentMethod = NULL;
}

map<string, Variable*> Executor::constants = map<string, Variable*>();


/****************************************************************************************
 * Executor::~Executor
 *
 * Description:
 *     Executor Destructor.
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
Executor::~Executor() {
    //
}


/****************************************************************************************
 * Executor::run
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::run(map<string, ClassDefinition* >* classes) {
    string sMain = "main";
    this->ExceptionState = NULL;
    this->currentMethod = (*classes)["~"]->getMethod(sMain);
    this->methodInstructions = this->currentMethod->getInstructionCodeVector();
    this->scopeStack = stack<Scope>();
    this->scopeStack.push(Scope());

    void (Executor::*fPtr)(void);

    while(!scopeStack.empty()) {
        //Has an exception been raised?
        if (this->ExceptionState != NULL) {
            //Deal with exceptions
        }

        //If the last instruction was called, return from method
        else if (currentInstruction >= this->currentMethod->getInstructionCodeSize()) {
            this->ret();
        }

        //Call the method
        fPtr = this->methodInstructions[this->currentInstruction].opFunction;
        if (fPtr != NULL) {
            (this->*fPtr)();
        }

        //Increment instruction
        this->currentInstruction++;
    }
}


/****************************************************************************************
 * Executor::makeVariableCopy
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
Variable* Executor::makeVariableCopy(Variable* v, Visibility visibility) {
    Variable* result;

    if (v->getType() == 'n') {
        result = new Number(visibility, v->getNumberValue());
    } else if (v->getType() == 's') {
        string s = v->getStringValue();
        result = new String(visibility, s);
    } else if (v->getType() == 'a') {
        result = new Array(visibility, (Array*) v);
    } else if (v->getType() == 'o') {
        result = new Object(visibility, (Object*) v);
    } else if (v->getType() == '0') {
            result = new Nil(visibility);
    } else {
        result = new Variable(visibility);
    }

    return result;
}





//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////                         /////////////////////////////////
////////////////////////////////   Instruction Methods   /////////////////////////////////
////////////////////////////////                         /////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////




/****************************************************************************************
 * Executor::print
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::print() {
    //
}



/****************************************************************************************
 * Executor::ret
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::ret() {
    this->scopeStack.pop();
}



/****************************************************************************************
 * Executor::brk
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::brk() {
    //
}



/****************************************************************************************
 * Executor::cont
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::cont() {
    //
}



/****************************************************************************************
 * Executor::thrw
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::thrw() {
    //Set to a value
    //this->ExceptionState = NULL;
}



/****************************************************************************************
 * Executor::assignment
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::assignment() {
    //
}



/****************************************************************************************
 * Executor::addAssign
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::addAssign() {
    //
}



/****************************************************************************************
 * Executor::subAssign
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::subAssign() {
    //
}



/****************************************************************************************
 * Executor::multAssign
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::multAssign() {
    //
}



/****************************************************************************************
 * Executor::divAssign
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::divAssign() {
    //
}



/****************************************************************************************
 * Executor::modAssign
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::modAssign() {
    //
}



/****************************************************************************************
 * Executor::powAssign
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::powAssign() {
    //
}



/****************************************************************************************
 * Executor::variableEquals
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::variableEquals() {
    //
}



/****************************************************************************************
 * Executor::typeEquals
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::typeEquals() {
    //
}



/****************************************************************************************
 * Executor::equals
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::equals() {
    //
}



/****************************************************************************************
 * Executor::notVariableEquals
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::notVariableEquals() {
    //
}



/****************************************************************************************
 * Executor::notTypeEquals
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::notTypeEquals() {
    //
}



/****************************************************************************************
 * Executor::notEquals
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::notEquals() {
    //
}



/****************************************************************************************
 * Executor::lessThan
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::lessThan() {
    //
}



/****************************************************************************************
 * Executor::lessThanEqual
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::lessThanEqual() {
    //
}



/****************************************************************************************
 * Executor::greaterThan
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::greaterThan() {
    //
}



/****************************************************************************************
 * Executor::greaterThanEqual
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::greaterThanEqual() {
    //
}



/****************************************************************************************
 * Executor::andd
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::andd() {
    //
}



/****************************************************************************************
 * Executor::orr
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::orr() {
    //
}



/****************************************************************************************
 * Executor::cat
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::cat() {
    //
}



/****************************************************************************************
 * Executor::sub
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::sub() {
    //
}



/****************************************************************************************
 * Executor::add
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::add() {
    //
}



/****************************************************************************************
 * Executor::mul
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::mul() {
    //
}



/****************************************************************************************
 * Executor::div
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::div() {
    //
}



/****************************************************************************************
 * Executor::pow
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::pow() {
    //
}



/****************************************************************************************
 * Executor::mod
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::mod() {
    //
}



/****************************************************************************************
 * Executor::inc
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::inc() {
    //
}



/****************************************************************************************
 * Executor::dec
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::dec() {
    //
}



/****************************************************************************************
 * Executor::negate
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::negate() {
    //
}



/****************************************************************************************
 * Executor::reference
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::reference() {
    //
}



/****************************************************************************************
 * Executor::deletion
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::deletion() {
    //
}



/****************************************************************************************
 * Executor::dynamicVar
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::dynamicVar() {
    //
}



/****************************************************************************************
 * Executor::staticVar
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::staticVar() {
    //
}



/****************************************************************************************
 * Executor::parameter
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::parameter() {
    //
}



/****************************************************************************************
 * Executor::call
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::call() {
    //
}



/****************************************************************************************
 * Executor::jmp
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::jmp() {
    //
}



/****************************************************************************************
 * Executor::jmpNotTrue
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::jmpNotTrue() {
    //
}



/****************************************************************************************
 * Executor::jmpTrue
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::jmpTrue() {
    //
}



/****************************************************************************************
 * Executor::arrayIndex
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::arrayIndex() {
    //
}



/****************************************************************************************
 * Executor::tryBlock
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::tryBlock() {
    //
}



/****************************************************************************************
 * Executor::catchBlock
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::catchBlock() {
    //
}


/****************************************************************************************
 * Executor::exception
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::exception() {
    //
}


/****************************************************************************************
 * Executor::finallyBlock
 *
 * Description:
 *     //
 *
 * Inputs:
 *     None
 *
 * Outputs:
 *     None
 ****************************************************************************************/
void Executor::finallyBlock() {
    //
}
